<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Wenlong Yi (Evan)</title>
        <link>https://yiwenlong2001.github.io/</link>
        <description>Recent content on Wenlong Yi (Evan)</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 30 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://yiwenlong2001.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Education</title>
        <link>https://yiwenlong2001.github.io/p/education/</link>
        <pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/p/education/</guid>
        <description>&lt;img src="https://yiwenlong2001.github.io/p/education/ucla.jpg" alt="Featured image of post Education" /&gt;&lt;h2 id=&#34;education&#34;&gt;Education&lt;/h2&gt;
&lt;h3 id=&#34;ungraduate&#34;&gt;Ungraduate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;School&lt;/strong&gt; Shanghai Jiao Tong University&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Degree&lt;/strong&gt;：Bachelor&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Major&lt;/strong&gt;：Computer Science&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt;：2019-9-1 to 2023-6-30&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Award&lt;/strong&gt;：2019, 2020, 2021 SJTU Honor Award&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Award&lt;/strong&gt;：Outstanding Graduates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relevant coursework&lt;/strong&gt; Data Science, Artificial Intelligence, Data Structure, Algorithm, Database, Machine Learning, Computer Network, Software Engineer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;graduate&#34;&gt;Graduate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;School&lt;/strong&gt; University of California, Los Angeles&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Degree&lt;/strong&gt;：Master&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Major&lt;/strong&gt;：Computer Science&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt;：2023-9-1 to 2025-5-1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relevant coursework&lt;/strong&gt; Reinforcement Learning, Big Data Analysis, Automatic Reasoning&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;activity&#34;&gt;Activity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SJTU&lt;/strong&gt; Deputy Director of the Social Practice Department of the Youth League Committee&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UCLA&lt;/strong&gt; Waiting to be filled&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Classification review notes (updating...)</title>
        <link>https://yiwenlong2001.github.io/p/classification-review-notes-updating.../</link>
        <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/p/classification-review-notes-updating.../</guid>
        <description>&lt;img src="https://yiwenlong2001.github.io/p/classification-review-notes-updating.../classification.png" alt="Featured image of post Classification review notes (updating...)" /&gt;&lt;h1 id=&#34;classification&#34;&gt;Classification&lt;/h1&gt;
&lt;h2 id=&#34;decision-tree&#34;&gt;Decision Tree&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;决策树最主要的就是构建决策树，构建决策树有以下几种著名的算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;id3算法&#34;&gt;ID3算法&lt;/h3&gt;
&lt;p&gt;ID3算法是一种基于信息熵的算法。通过信息增益找到可以最合适的划分属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gain(S, A) = E(S) - E(S|A)&lt;br&gt;
E(S|A) = - sum(|S_i|/|S| * E(S_1))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;计算所有的属性对应的信息增益，选择信息增益最大的属性对数据集进行划分。&lt;/li&gt;
&lt;li&gt;递归地对之后的数据集进行划分直到：
&lt;ul&gt;
&lt;li&gt;只剩一个属性无法继续划分&lt;/li&gt;
&lt;li&gt;所有的属性信息增益都很小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无剪枝策略，容易过拟合；&lt;/li&gt;
&lt;li&gt;只能用于处理离散分布的特征；&lt;/li&gt;
&lt;li&gt;没有考虑缺失值。&lt;/li&gt;
&lt;li&gt;信息增益准则对可取值数目较多的特征有所偏好，类似“编号”的特征其信息增益接近于 1，而信息增益比指数可以解决此缺点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这些问题，提出这些改进：&lt;/p&gt;
&lt;h3 id=&#34;gain-ratio&#34;&gt;Gain ratio&lt;/h3&gt;
&lt;p&gt;$ SplitInformation = \sum_{i=1}^{c} \frac{|S_i|}{|S|} log_2 \frac{|S_i|}{|S|} $
$ GainRatio(S, A) = \frac{Gain(S, A)}{SplitInformatio(S, A)} $&lt;/p&gt;
&lt;h3 id=&#34;gini-index&#34;&gt;Gini Index&lt;/h3&gt;
&lt;p&gt;如果一个数据集有n各种类的数据，那么gini index被定义为
$$ gini(T) = 1 - \sum_{j=1}^n p_j^2$$
其中$ p_j $是种类j再数据集中的频繁程度&lt;/p&gt;
&lt;p&gt;假如我们将数据集T分为大小分别为N1和N2的两个子集T1和T2， 那么此次分割中：
$$ gini_{split}(T) = \frac{N_1}{N} gini(T_1) + \frac{N_2}{N} gini(T_2) $$&lt;/p&gt;
&lt;p&gt;在各种分割中，选择$ gini_{split}(T) $最小的分法。&lt;/p&gt;
&lt;h3 id=&#34;过拟合&#34;&gt;过拟合&lt;/h3&gt;
&lt;p&gt;针对过拟合可以采用以下两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prepruning: Halt tree construction early—do not split a node if this would result in the goodness measure falling below a threshold&lt;/li&gt;
&lt;li&gt;Postpruning: Remove branches from a “fully grown” tree—get a sequence of progressively pruned trees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;确定树的大小：使用MDL原则&lt;/p&gt;
&lt;h2 id=&#34;贝叶斯网络&#34;&gt;贝叶斯网络&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>NNF review notes (updating...)</title>
        <link>https://yiwenlong2001.github.io/p/nnf-review-notes-updating.../</link>
        <pubDate>Sat, 28 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/p/nnf-review-notes-updating.../</guid>
        <description>&lt;img src="https://yiwenlong2001.github.io/p/nnf-review-notes-updating.../NNF.png" alt="Featured image of post NNF review notes (updating...)" /&gt;&lt;h1 id=&#34;nnf-和-对应拓展性质&#34;&gt;NNF 和 对应拓展性质&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://yiwenlong2001.github.io/p/nnf-review-notes-updating.../graph.png&#34;
	width=&#34;2552&#34;
	height=&#34;1432&#34;
	srcset=&#34;https://yiwenlong2001.github.io/p/nnf-review-notes-updating.../graph_hue809ba37d1bd8bc2d34f0900f49d9d9a_893207_480x0_resize_box_3.png 480w, https://yiwenlong2001.github.io/p/nnf-review-notes-updating.../graph_hue809ba37d1bd8bc2d34f0900f49d9d9a_893207_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;nnf&#34;&gt;NNF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;输入为variable以及variable的否定，由与或门组成的逻辑网络&lt;/li&gt;
&lt;li&gt;这是一种最常见的逻辑网络，我们没办法做什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dnnf&#34;&gt;DNNF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在NNF的基础上，要求每一个and节点的任意两个分支所涉及的节点交集为空（no overlap）&lt;/li&gt;
&lt;li&gt;在这个网络上，NNF的可行性可以被简单地验证&lt;/li&gt;
&lt;li&gt;我们可以在多项式时间内执行：CO, CE, ME这三个任务&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;任务汇总：&lt;br&gt;
CO: consistency&lt;br&gt;
VA: Validity&lt;br&gt;
SE: sentential entailment&lt;br&gt;
&lt;strong&gt;CE: clausal entailment(KB implies clause)&lt;/strong&gt;&lt;br&gt;
IP: implicant testing(term implies KB)&lt;br&gt;
EQ: equivalence testing&lt;br&gt;
CT: model countig&lt;br&gt;
ME: model enumeration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DNNF能够在线性时间内完成clause entailment&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个NNF子图能够在线性时间内完成clause entailment，我们称之为tractable。DNNF是tractable的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dnnf-1&#34;&gt;dNNF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在NNF的基础上，要求每一个or节点的任意两个分支的输入之间互斥&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;E.g.  $(\neg A \land B) \lor (A \land \neg B)$ 就是互斥的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这意味着无论你怎么取值，or节点的不可能有两个输入同时为true&lt;/li&gt;
&lt;li&gt;dNNF不是tractable的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;snnf&#34;&gt;sNNF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;smoothness&amp;rdquo;，在NNF的基础上，要求每一个or节点的任意两个分支所涉及的参数必须相同。&lt;/li&gt;
&lt;li&gt;sNNF不是tractable的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;d-dnnf&#34;&gt;d-DNNF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;顾名思义，同时满足dNNF和DNNF。&lt;/li&gt;
&lt;li&gt;d-DNNF是tractable的。&lt;/li&gt;
&lt;li&gt;d-DNNF可以在多项式时间内实现VA， IP， CT任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sd-dnnf&#34;&gt;sd-DNNF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同时满足dNNF和DNNF和sNNF&lt;/li&gt;
&lt;li&gt;tractable。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;f-nnf&#34;&gt;f-NNF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;flatness or shallow circuit&lt;/li&gt;
&lt;li&gt;满足性质：网络仅仅只有两层&lt;/li&gt;
&lt;li&gt;Simple conjunction：由or-and-variable组成，且每个and下的variable均各不相同，我们可以将这种网络改写为DNF形式。&lt;/li&gt;
&lt;li&gt;Simple conjunction同时满足decomposity性质。&lt;/li&gt;
&lt;li&gt;Simple disjunction，CNF，同上。&lt;/li&gt;
&lt;li&gt;f-NNF和CNF不是tractable。但是DNF是tractable的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pi&#34;&gt;PI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;prime Implicates, 是一种特殊的CNF，要求CNF满足：
&lt;ul&gt;
&lt;li&gt;没有一个clause是其他clause的子集（都是有用的clause）&lt;/li&gt;
&lt;li&gt;如果可以进行resolution，那么resolution的结果一定本来就可以被其中某个clause imply。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNF的版本称之为IP&lt;/li&gt;
&lt;li&gt;PI来自于CNF， 可以在多项式时间内解决CO, CE, ME, VA, IP, SE, EQ问题&lt;/li&gt;
&lt;li&gt;IP来自于DNF，可以额外在多项式时间内解决VA, IP, SE, EQ问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bdd&#34;&gt;BDD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;decision graph： variable的取值由其parent决定。&lt;/li&gt;
&lt;li&gt;同时还是decomposition。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fbdd&#34;&gt;FBDD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;test one property：从任何一条根节点到叶子节点的路径上，每一个variable都只能出现一次&lt;/li&gt;
&lt;li&gt;是在d-DNNF和BDD的基础上的，因此他可以在多项式时间内解决七个问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;obdd&#34;&gt;OBDD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在任意从根节点到叶子节点的路径上，都满足同一variable的顺序&lt;/li&gt;
&lt;li&gt;decision decomposability order&lt;/li&gt;
&lt;li&gt;可以在多项式时间内完成SE， EQ任务，因此它在多项式时间内可以完成所有的任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;dnnf详解&#34;&gt;DNNF详解&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;transformation operation:&lt;br&gt;
CD: conditioning.&lt;br&gt;
SFO: single variable.&lt;br&gt;
FO: multiple variable.&lt;br&gt;
&amp;amp;: conjunction.&lt;br&gt;
B&amp;amp;: bounded conjoin.&lt;br&gt;
|: disjoin.&lt;br&gt;
B|: bounded disjoin.&lt;br&gt;
~: negate&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Cluster review notes (updating...)</title>
        <link>https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../</link>
        <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../</guid>
        <description>&lt;img src="https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../cluster.jpg" alt="Featured image of post Cluster review notes (updating...)" /&gt;&lt;h1 id=&#34;cluster&#34;&gt;Cluster&lt;/h1&gt;
&lt;h2 id=&#34;algorithm_1-k-means&#34;&gt;Algorithm_1 K-means&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;randomly choose initial cluster centroics.&lt;/li&gt;
&lt;li&gt;assign each point to its nearset centroic.&lt;/li&gt;
&lt;li&gt;do iteration until the location of any centroics does not change:
&lt;ul&gt;
&lt;li&gt;caluculate the mean value for every point of each cluster.&lt;/li&gt;
&lt;li&gt;relocate every point.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;algorithm_2-pam&#34;&gt;Algorithm_2 PAM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arbitrarily choose k objects as the initial medoids&lt;/li&gt;
&lt;li&gt;Until no change, do
&lt;ul&gt;
&lt;li&gt;(Re)assign each object to the cluster to which the nearest medoid&lt;/li&gt;
&lt;li&gt;Randomly select a non-medoid object o’, compute the total cost, S, of swapping medoid o with o’&lt;/li&gt;
&lt;li&gt;If S &amp;lt; 0 then swap o with o’ to form the new set of k medoids&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Swapping Cost:&lt;/strong&gt; Measure whether o’ is better than o as a medoid&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;algorithm_3-clara&#34;&gt;Algorithm_3 CLARA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;random sample in huge data&lt;/li&gt;
&lt;li&gt;do PAM&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PAM search the whole graph&lt;br&gt;
CLARA search some random sub-graphs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;algorithm_4-hierarchical-clustering&#34;&gt;Algorithm_4 Hierarchical Clustering&lt;/h2&gt;
&lt;h3 id=&#34;agnes-agglomerative&#34;&gt;AGNES (agglomerative)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Initially, each object is a cluster&lt;/li&gt;
&lt;li&gt;Step-by-step cluster merging, until all objects form a cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;diana-divisive&#34;&gt;DIANA (divisive)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Initially, all objects are in one cluster&lt;/li&gt;
&lt;li&gt;Step-by-step splitting clusters until each cluster contains only one object&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single-Link（最短距离链接）：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Single-Link聚类方法将两个簇之间的距离定义为它们中最接近的两个点之间的距离。换句话说，它测量了两个簇中最相似的成员之间的距离。这种方法倾向于形成具有长而窄的簇，因为它强调了局部相似性。Single-Link在处理非凸形状的簇时表现良好，但容易受到噪声和异常值的影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Complete-Link（最长距离链接）：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Complete-Link聚类方法将两个簇之间的距离定义为它们中最不相似的两个点之间的距离。它关注的是两个簇中最不相似的成员之间的距离。这种方法更倾向于形成具有更紧凑形状的簇，因为它强调了簇的全局相似性。Complete-Link对于处理不同大小和不同密度的簇效果较好，但可能会受到异常值的干扰。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;algorithm_5-birch&#34;&gt;Algorithm_5 BIRCH&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Clustering Feature:  CF = (N, LS, SS)&lt;br&gt;
N: #data points&lt;br&gt;
LS: sum of position&lt;br&gt;
SS: sum of the square of the position&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Phase 1: scan DB to build an initial inmemory CF tree (a multi-level compression of the data that tries to preserve the inherent clustering structure of the data)&lt;/li&gt;
&lt;li&gt;Phase 2: use an arbitrary clustering algorithm to cluster the leaf nodes of the CF-tree&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../birch.png&#34;
	width=&#34;1066&#34;
	height=&#34;783&#34;
	srcset=&#34;https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../birch_hu1f7cfcf85d02ae0cac7b9002dcc28f68_55343_480x0_resize_box_3.png 480w, https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../birch_hu1f7cfcf85d02ae0cac7b9002dcc28f68_55343_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;326px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一开始只有一个空的root，然后一个一个加进去，如果在已有节点的球体内，则合为一个cluster，如果一个cluster超过一定数量，则分裂：选择最远两个点最为两个新的cluster中心点，重新分配，保证树结构完整性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;algorithm_6-distance-based-methods&#34;&gt;Algorithm_6 Distance-based Methods&lt;/h2&gt;
&lt;h3 id=&#34;previous-knowledge&#34;&gt;Previous Knowledge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eps&lt;/strong&gt;: Maximum radius of the neighborhood&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MinPts&lt;/strong&gt;: Minimum number of points in an Eps- neighborhood of that point&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NEps(p)&lt;/strong&gt;: {q | dist(p,q) $\leq$ Eps}&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Core object p&lt;/strong&gt;: |Neps(p)| $\ge$ MinPts&lt;/li&gt;
&lt;li&gt;Point q &lt;strong&gt;directly density-reachable&lt;/strong&gt; from p iff q $\in$ Neps(p) and p is a core object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Density-reachable:&lt;/strong&gt; p1 $\rightarrow$ p2, p2 $\rightarrow$ p3, &amp;hellip;, pn-1 $\rightarrow$ pn then pn is density-reachable from p1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Density-connected:&lt;/strong&gt; Points p, q are density-reachable from o $\rightarrow$ p and q are density-connected&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dbscan&#34;&gt;DBSCAN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Arbitrary select a point p&lt;/li&gt;
&lt;li&gt;Retrieve all points directly density-reachable from p wrt Eps and MinPts&lt;/li&gt;
&lt;li&gt;If p is a core point, a cluster is formed&lt;/li&gt;
&lt;li&gt;If p is a border point, no points are density- reachable from p and DBSCAN visits the next point of the database&lt;/li&gt;
&lt;li&gt;Continue the process until all of the points have been processed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../DBSCAN.png&#34;
	width=&#34;2154&#34;
	height=&#34;820&#34;
	srcset=&#34;https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../DBSCAN_huabd1eadf2ef4cdb183dd88d1d60e4bc1_347203_480x0_resize_box_3.png 480w, https://yiwenlong2001.github.io/p/cluster-review-notes-updating.../DBSCAN_huabd1eadf2ef4cdb183dd88d1d60e4bc1_347203_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;630px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P.S. 一个一个判断，如果是cluster，且范围内点已形成cluster，则加入，若无先前cluster，则新建立一个。若是后建立的和之前建立的通过一个点reachable了，则将两个cluster合为一个。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Resume</title>
        <link>https://yiwenlong2001.github.io/resume/</link>
        <pubDate>Sun, 15 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/resume/</guid>
        <description>&lt;p&gt;&lt;strong&gt;This is my resume and I am seeking for SDE summer internship in 2024.&lt;/strong&gt;
&lt;strong&gt;&lt;p&gt; If the thumbnail of the resume does not load successfull， you can also download the PDF to view it.&lt;/p&gt;&lt;/strong&gt;
&lt;button onclick=&#34;window.location.href=&#39;https://drive.google.com/file/d/1bgg7LrGB88VqpEhP5AGvI9TVFLvVIPos/view?usp=sharing&#39;;&#34;&gt;
Click Here to Download
&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yiwenlong2001.github.io/resume/Resume.jpg&#34;
	width=&#34;1700&#34;
	height=&#34;2200&#34;
	srcset=&#34;https://yiwenlong2001.github.io/resume/Resume_hu54d91a2bab3bb3210b563591de8feb7d_455608_480x0_resize_q75_box.jpg 480w, https://yiwenlong2001.github.io/resume/Resume_hu54d91a2bab3bb3210b563591de8feb7d_455608_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;185px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PyTorch CUDA Operators Parallelism Implementation and Optimization</title>
        <link>https://yiwenlong2001.github.io/p/pytorch-cuda-operators-parallelism-implementation-and-optimization/</link>
        <pubDate>Sun, 25 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/p/pytorch-cuda-operators-parallelism-implementation-and-optimization/</guid>
        <description>&lt;img src="https://yiwenlong2001.github.io/p/pytorch-cuda-operators-parallelism-implementation-and-optimization/GPU.jpg" alt="Featured image of post PyTorch CUDA Operators Parallelism Implementation and Optimization" /&gt;&lt;ul&gt;
&lt;li&gt;Employed warp-level primitives to optimize warp reduce of Softmax Kernel, which improved efficiency by 7%&lt;/li&gt;
&lt;li&gt;Implemented matrix multiplication kernel with matrix chunking and shared memory in C and CUDA&lt;/li&gt;
&lt;li&gt;Optimized shared memory access via vector read instruction LDS.128, resulting in a 3% efficiency improvement
&lt;a class=&#34;link&#34; href=&#34;https://github.com/wangshanyw/PyTorch-CUDA-Operators-Implementation-and-Optimization&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;span style=&#34;color:blue&#34;&gt; Github Repo Link &lt;span&gt;&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/presentation/d/1uhkq8XJ8SvoxHUiech5nn_noU7b2TYk7/edit?usp=sharing&amp;amp;ouid=108660935975018643927&amp;amp;rtpof=true&amp;amp;sd=true&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;span style=&#34;color:blue&#34;&gt; Docs Link &lt;span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>https://yiwenlong2001.github.io/archives/</link>
        <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Proof of uniqueness of the entropy formula</title>
        <link>https://yiwenlong2001.github.io/p/proof-of-uniqueness-of-the-entropy-formula/</link>
        <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/p/proof-of-uniqueness-of-the-entropy-formula/</guid>
        <description>&lt;img src="https://yiwenlong2001.github.io/p/proof-of-uniqueness-of-the-entropy-formula/entropy.jpg" alt="Featured image of post Proof of uniqueness of the entropy formula" /&gt;&lt;center&gt;&lt;embed src=&#34;Information_Entropy.pdf&#34; width=&#34;850&#34; height=&#34;2600&#34;&gt;&lt;/center&gt;</description>
        </item>
        <item>
        <title>Links</title>
        <link>https://yiwenlong2001.github.io/links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/links/</guid>
        <description></description>
        </item>
        <item>
        <title>Search</title>
        <link>https://yiwenlong2001.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yiwenlong2001.github.io/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
